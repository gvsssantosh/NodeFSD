What are SOLID Principles in software development?


1. Single Responsibility Principle:
every class should have a single responsibility or single job or single purpose.

2. Open/Closed Principle:
“Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification” which means you should be able to extend a class behavior, without modifying it.

3. Liskov’s Substitution Principle:
Derived or child classes must be substitutable for their base or parent classes.

4. Interface Segregation Principle:
do not force any client to implement an interface which is irrelevant to them.

5. Dependency Inversion Principle:
High-level modules should not depend on low-level modules. Both should depend on abstractions.
It suggests that classes should rely on abstractions (e.g., interfaces or abstract classes) rather than concrete implementations.

Why do we use design patterns? Benefits ?
Design patterns are reusable solutions to common problems that arise during software development. They provide a structured approach to design and help developers build software that is more maintainable, flexible, and scalable.

Benefits:
Reusability
Scalability
Maintainability

What are the types of design patterns?
Creational Patterns:
These patterns are designed for the instantiation of classes.

singleton class for db connection.
Structural Patterns:
Behavioral Patterns: 
Behavioral patterns are those design patterns that describe and identify the interactions between different objects.
